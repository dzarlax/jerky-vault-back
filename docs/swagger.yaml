basePath: /
definitions:
  controllers.ChangePasswordRequest:
    properties:
      currentPassword:
        type: string
      newPassword:
        type: string
    type: object
  controllers.DashboardData:
    properties:
      pendingOrders:
        items:
          $ref: '#/definitions/controllers.PendingOrder'
        type: array
      topRecipes:
        items:
          $ref: '#/definitions/models.Recipe'
        type: array
      totalIngredients:
        type: integer
      totalOrders:
        type: integer
      totalProducts:
        type: integer
      totalRecipes:
        type: integer
      typeDistribution:
        items:
          $ref: '#/definitions/controllers.TypeDistribution'
        type: array
    type: object
  controllers.LoginPayload:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controllers.PendingOrder:
    properties:
      client_name:
        type: string
      client_surname:
        type: string
      created_at:
        type: string
      id:
        type: integer
      status:
        type: string
    type: object
  controllers.RegisterPayload:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controllers.TypeDistribution:
    properties:
      count:
        type: integer
      type:
        type: string
    type: object
  models.Client:
    properties:
      address:
        type: string
      created_at:
        type: string
      id:
        type: integer
      instagram:
        type: string
      name:
        type: string
      orders:
        items:
          $ref: '#/definitions/models.Order'
        type: array
      phone:
        type: string
      source:
        type: string
      surname:
        type: string
      telegram:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.CookingSession:
    properties:
      created_at:
        type: string
      date:
        type: string
      id:
        type: integer
      ingredients:
        items:
          $ref: '#/definitions/models.CookingSessionIngredient'
        type: array
      recipe:
        $ref: '#/definitions/models.Recipe'
      recipe_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      yield:
        type: string
    type: object
  models.CookingSessionIngredient:
    properties:
      cooking_session:
        $ref: '#/definitions/models.CookingSession'
      cooking_session_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      ingredient:
        $ref: '#/definitions/models.Ingredient'
      ingredient_id:
        type: integer
      price:
        type: number
      quantity:
        type: string
      unit:
        type: string
      updated_at:
        type: string
    type: object
  models.Ingredient:
    properties:
      cooking_session_ingredients:
        items:
          $ref: '#/definitions/models.CookingSessionIngredient'
        type: array
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      prices:
        items:
          $ref: '#/definitions/models.Price'
        type: array
      recipe_ingredients:
        items:
          $ref: '#/definitions/models.RecipeIngredient'
        type: array
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.Order:
    properties:
      client:
        $ref: '#/definitions/models.Client'
      client_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      status:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.OrderItem:
    properties:
      cost_price:
        type: number
      created_at:
        type: string
      id:
        type: integer
      order:
        $ref: '#/definitions/models.Order'
      order_id:
        type: integer
      price:
        type: number
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  models.Package:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      products:
        description: Если Package связан с Product через PackageID
        items:
          $ref: '#/definitions/models.Product'
        type: array
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Price:
    properties:
      created_at:
        type: string
      date:
        type: string
      id:
        type: integer
      ingredient:
        $ref: '#/definitions/models.Ingredient'
      ingredient_id:
        type: integer
      price:
        type: number
      quantity:
        type: integer
      unit:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Product:
    properties:
      cost:
        type: number
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/models.ProductOption'
        type: array
      package:
        allOf:
        - $ref: '#/definitions/models.Package'
        description: Добавьте это поле, если необходимо загружать данные об упаковке
      package_id:
        description: Добавьте это поле
        type: integer
      price:
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.ProductOption:
    properties:
      created_at:
        type: string
      id:
        type: integer
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: integer
      recipe:
        $ref: '#/definitions/models.Recipe'
      recipe_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.ProductRequest:
    properties:
      options:
        items:
          $ref: '#/definitions/models.ProductOption'
        type: array
      product:
        $ref: '#/definitions/models.Product'
    type: object
  models.Recipe:
    properties:
      cooking_sessions:
        items:
          $ref: '#/definitions/models.CookingSession'
        type: array
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      product_options:
        items:
          $ref: '#/definitions/models.ProductOption'
        type: array
      recipe_ingredients:
        items:
          $ref: '#/definitions/models.RecipeIngredient'
        type: array
      total_cost:
        description: Поле не сохраняется в базу данных
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.RecipeIngredient:
    properties:
      created_at:
        type: string
      id:
        type: integer
      ingredient:
        $ref: '#/definitions/models.Ingredient'
      ingredient_id:
        type: integer
      quantity:
        type: string
      recipe:
        $ref: '#/definitions/models.Recipe'
      recipe_id:
        type: integer
      unit:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      clients:
        items:
          $ref: '#/definitions/models.Client'
        type: array
      created_at:
        type: string
      id:
        type: integer
      orders:
        items:
          $ref: '#/definitions/models.Order'
        type: array
      packages:
        items:
          $ref: '#/definitions/models.Package'
        type: array
      password:
        type: string
      prices:
        items:
          $ref: '#/definitions/models.Price'
        type: array
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      recipes:
        items:
          $ref: '#/definitions/models.Recipe'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API проекта jerky-vault
  title: Jerky-vault Backend API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login a user
      tags:
      - Auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user with a username and password
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Auth
  /api/clients:
    get:
      description: Get all clients for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Client'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of clients
      tags:
      - Clients
    post:
      consumes:
      - application/json
      description: Create a new client for the authenticated user
      parameters:
      - description: Client data
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/models.Client'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Client'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add a new client
      tags:
      - Clients
  /api/clients/{id}:
    delete:
      description: Delete a client by its ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Client deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid client ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Client not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a client
      tags:
      - Clients
    get:
      description: Fetch a client by its ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Client'
        "400":
          description: Invalid client ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Client not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a client by ID
      tags:
      - Clients
    put:
      consumes:
      - application/json
      description: Update a client's details
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      - description: Client data
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/models.Client'
      produces:
      - application/json
      responses:
        "200":
          description: Client updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid client ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Client not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a client
      tags:
      - Clients
  /api/cooking_sessions:
    get:
      description: Get all cooking sessions available for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CookingSession'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of cooking sessions
      tags:
      - Cooking Sessions
    post:
      consumes:
      - application/json
      description: Create a new cooking session with details
      parameters:
      - description: Cooking Session data
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/models.CookingSession'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CookingSession'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new cooking session
      tags:
      - Cooking Sessions
  /api/dashboard:
    get:
      description: Fetch statistics for the dashboard
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.DashboardData'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get dashboard data
      tags:
      - Dashboard
  /api/ingredients:
    get:
      description: Get all ingredients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ingredient'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of ingredients
      tags:
      - Ingredients
    post:
      consumes:
      - application/json
      description: Create a new ingredient with type and name
      parameters:
      - description: Ingredient data
        in: body
        name: ingredient
        required: true
        schema:
          $ref: '#/definitions/models.Ingredient'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Ingredient'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new ingredient
      tags:
      - Ingredients
  /api/orders:
    get:
      description: Get all orders for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of orders
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Create a new order for the authenticated user
      parameters:
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add a new order
      tags:
      - Orders
  /api/orders/{id}:
    delete:
      description: Delete an order by its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Order deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid order ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete an order
      tags:
      - Orders
    get:
      description: Fetch an order by its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Invalid order ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get an order by ID
      tags:
      - Orders
    put:
      consumes:
      - application/json
      description: Update an order's details
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "200":
          description: Order updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid order ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an order
      tags:
      - Orders
  /api/orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order status
        in: body
        name: status
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Order status updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid order ID or missing status
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update order status
      tags:
      - Orders
  /api/packages:
    get:
      description: Get all packages for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Package'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of packages
      tags:
      - Packages
    post:
      consumes:
      - application/json
      description: Create a new package for the authenticated user
      parameters:
      - description: Package data
        in: body
        name: package
        required: true
        schema:
          $ref: '#/definitions/models.Package'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Package'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add a new package
      tags:
      - Packages
  /api/prices:
    get:
      description: Get all prices with optional filters
      parameters:
      - description: Ingredient ID
        in: query
        name: ingredient_id
        type: integer
      - description: Date in YYYY-MM-DD format
        in: query
        name: date
        type: string
      - description: Column to sort by
        in: query
        name: sort_column
        type: string
      - description: Sort direction (ASC or DESC)
        in: query
        name: sort_direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Price'
            type: array
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of prices
      tags:
      - Prices
    post:
      consumes:
      - application/json
      description: Add a new price for an ingredient
      parameters:
      - description: Price data
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/models.Price'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Price'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add a new price
      tags:
      - Prices
  /api/products:
    get:
      description: Get all products available
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product by providing necessary details, including
        product options
      parameters:
      - description: Product data and options
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /api/products/{id}:
    delete:
      description: Delete a product by providing the product ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: 'message": "Product deleted successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete product
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete an existing product
      tags:
      - Products
  /api/profile/change-password:
    post:
      consumes:
      - application/json
      description: Change the password for the authenticated user
      parameters:
      - description: Password change data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Profile
  /api/recipes:
    get:
      description: Get all recipes available for the authenticated user with optional
        filtering by recipe_id and ingredient_id
      parameters:
      - description: Filter by Recipe ID
        example: 1
        in: query
        name: recipe_id
        type: integer
      - description: Filter by Ingredient ID
        example: 3
        in: query
        name: ingredient_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Recipe'
            type: array
        "400":
          description: Invalid parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to fetch recipes
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of recipes
      tags:
      - Recipes
    post:
      consumes:
      - application/json
      description: Create a new recipe for the authenticated user
      parameters:
      - description: Recipe data
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/models.Recipe'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Recipe'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new recipe
      tags:
      - Recipes
  /api/recipes/{id}:
    delete:
      description: Delete a recipe by its ID for the authenticated user
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Recipe deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid recipe ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Recipe not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a recipe
      tags:
      - Recipes
    get:
      description: Get a recipe by its ID for the authenticated user
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Recipe'
        "400":
          description: Invalid recipe ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Recipe not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a recipe
      tags:
      - Recipes
  /api/recipes/{recipe_id}/ingredients:
    post:
      consumes:
      - application/json
      description: Add an ingredient to a recipe by recipe ID
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      - description: Recipe Ingredient data
        in: body
        name: ingredient
        required: true
        schema:
          $ref: '#/definitions/models.RecipeIngredient'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RecipeIngredient'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Recipe not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add an ingredient to a recipe
      tags:
      - Recipe Ingredients
  /api/recipes/{recipe_id}/ingredients/{ingredient_id}:
    delete:
      description: Delete an ingredient from a recipe by recipe ID and ingredient
        ID
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      - description: Ingredient ID
        in: path
        name: ingredient_id
        required: true
        type: integer
      responses:
        "200":
          description: Ingredient deleted from recipe successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Recipe or Ingredient not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete an ingredient from a recipe
      tags:
      - Recipe Ingredients
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
